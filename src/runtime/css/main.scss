/* CSS Reset */

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	vertical-align: baseline;
  box-sizing: border-box;
}

$margin-step: 0.2rem;



/* This is very much a hack, but it will have to do for now */

.rounded {
  border-radius: var(--e-rounded-border-radius);
}

.rounded-top {
  border-top-left-radius: var(--e-rounded-border-radius);
  border-top-right-radius: var(--e-rounded-border-radius);
}

.rounded-bottom {
  border-bottom-left-radius: var(--e-rounded-border-radius);
  border-bottom-right-radius: var(--e-rounded-border-radius);
}

body {
  margin: 0px;
}


a {
  color: var(--e-color-primary);
  text-decoration: underline;
  text-underline-offset: 0.2rem;
  text-decoration-thickness: 0.05rem;


  &:visited {
    color: var(--e-color-primary);
  }

  &:active {
    color: var(--e-color-i);
  }

  &:hover {
    text-underline-offset: 0.15rem;
    text-decoration-thickness: 0.1rem;

  }
}

@mixin color-definitions($color-map) {

  :root {
    @each $name, $color in $color-map {
      #{'--e-color-'+$name}: $color;
      #{'--e-color-'+$name+'-rgb'}: color.channel($color, "red", $space: rgb), color.channel($color, "green", $space: rgb), color.channel($color, "blue", $space: rgb);

    }
  }

  @each $name, $color in $color-map {
    .bg-#{$name} {
      background: $color;

      @if (color.channel($color, "lightness", $space: hsl) > 49%) {
        color: map.get($root-colors-light, "text");
      }

      @else {
        color: map.get($root-colors-dark, "text");
      }
    }

    .color-#{$name} {
      color: $color;
    }
  }
}

@mixin elev($lightness, $contrast, $light, $color-map) {

  $source: hsl($root-hue, 8%, $lightness);
  $source-i: color.change($source, $saturation: 12%);

  $full: 0;
  $factor: 1;

  @if $light ==1 {
    $full: 100;
    $factor: -1;
  }
  $color-map: map.set($color-map, "source", $source);

  $color-map: map.set($color-map, "i-depressed", color.adjust($source-i, $lightness: -2.5%));
  $color-map: map.set($color-map, "i-depressed-2", color.adjust($source-i, $lightness: -7.5%));
  $color-map: map.set($color-map, "i-depressed-active", color.adjust($source-i, $lightness: -5%, $saturation: 2%));


  $color-map: map.set($color-map, "i-inactive", color.adjust($source-i, $lightness: 10%));
  $color-map: map.set($color-map, "i", color.adjust($source-i, $lightness: 20%));
  $color-map: map.set($color-map, "i-active", color.scale(map.get($color-map, "i"), $saturation: 20%));

  $color-map: map.set($color-map, "i-outline", color.change($source-i, $lightness: $full + $factor*30%));

  $color-map: map.set($color-map, "bg", $source);
  $color-map: map.set($color-map, "fg", color.adjust($source, $lightness: 2%));


  $color-map: map.set($color-map, "elev", color.scale(map.get($color-map, "fg"), $lightness: $lightness*0.25));
  $color-map: map.set($color-map, "elev-2", color.scale(map.get($color-map, "fg"), $lightness: $lightness*0.5));
  $color-map: map.set($color-map, "elev-3", color.scale(map.get($color-map, "fg"), $lightness: $lightness));




  $root-elev: color.scale($source, $lightness: $lightness);
  $root-elev-2: color.scale($source, $lightness: $lightness);
  $root-elev-3: color.scale($source, $lightness: $lightness);

  @include color-definitions($color-map);

}

:root {
  color-scheme: light;
}

//@include elev(95%,1, 1, $root-colors-light);
@include color-definitions($root-colors-light);



@media (prefers-color-scheme: dark) {
  :root {
    color-scheme: dark;
  }
  @include color-definitions($root-colors-dark);
}